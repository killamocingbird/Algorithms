import java.util.ArrayList;
import java.util.Scanner;

public class GridBFS {

    public static class mPoint {
        public int x, y;
        public mPoint(int a, int b) {
            this.x = a;
            this.y = b;
        }
        public String toString() {
        	return "(" + this.x + " " + this.y + ")";
        }
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt(), m = in.nextInt();
        boolean[][] grid = new boolean[n + 2][m + 2];
        mPoint source = null;
        mPoint sink = null;
        for (int i = 1; i <= n; i++) {
            char[] s = in.nextLine().trim().toCharArray();
            for (int j = 1 ; j <= m; j++) {
                if (s[j - 1] == '.') {
                    grid[i][j] = true;
                } else if (s[j - 1] == 'S') {
                    source = new mPoint(i, j);
                } else if (s[j - 1] == 'E') {
                	grid[i][j] = true;
                    sink = new mPoint(i, j);
                }
            }
        }

        ArrayList<mPoint> cur = new ArrayList<>();
        ArrayList<mPoint> next = new ArrayList<>();
        int step = 0;
        cur.add(source);
        bfs: while (!cur.isEmpty()) {
//        	System.out.println(cur);
            for (mPoint p : cur) {
                if (p.x == sink.x && p.y == sink.y) {
                    break bfs;
                }
                bfs(grid, p, next, 1, 0);
                bfs(grid, p, next, -1, 0);
                bfs(grid, p, next, 0, 1);
                bfs(grid, p, next, 0, -1);
            }
            step++;
            cur.clear();
            cur.addAll(next);
            next.clear();
        }
        System.out.println(step - 1);
    }

    public static void bfs(boolean[][] grid, mPoint p, ArrayList<mPoint> next, int a, int b) {
        //Condition
    	if (grid[p.x + a][p.y + b]) {
            grid[p.x + a][p.y + b] = false;
            next.add(new mPoint(p.x + a, p.y + b));
    	}
    }

}
